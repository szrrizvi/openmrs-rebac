/**
 * The contents of this file are subject to the OpenMRS Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://license.openmrs.org
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * Copyright (C) OpenMRS, LLC.  All Rights Reserved.
 */

package org.openmrs.action;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import org.openmrs.BaseOpenmrsMetadata;
import org.openmrs.Person;
import org.openmrs.User;

/**
 * This class represents a participant involved in an Action. When the action is created, this is
 * just a place holder, to be filled when the Action is being executed
 */

public class Participant extends BaseOpenmrsMetadata implements Serializable {
	
	public static final long serialVersionUID = 1L;
	
	// Fields
	private Integer participantId; // The id
	
	private String name; // Participant identifier
	
	private Action action; // The associated Action
	
	// The list of free variables assigned to this participant
	Set<String> freeVariables;
	
	// Place holders to be filled when the Action is being executed
	// The participant can be either the User or a Person
	private Person person;
	
	private User user;
	
	/**
	 * Default constructor
	 */
	public Participant() {
	}
	
	/**
	 * Constructor to instantiate the object. 
	 * @param name The name of the participant
	 */
	public Participant(String name) {
		this.name = name;
		person = null;
		user = null;
		freeVariables = new HashSet<String>();
	}
	
	/**
	 * @return The person object, regardless of the participant being person or user.
	 * 		   If the person field is null, obtain the person from the user field
	 */
	public Person retrievePerson() {
		if (person != null) {
			return person;
		} else if (user != null) {
			return user.getPerson();
		} else {
			return null;
		}
	}
	
	/**
	 * Adds the given freeVariable to the list of free variables that this participant represents
	 * @param freeVariable The free variable to add to the list
	 */
	public void addFreeVariable(String freeVariable) {
		this.freeVariables.add(freeVariable);
	}
	
	// Field accessors
	
	/**
	 * @return the participantId
	 */
	public Integer getParticipantId() {
		return participantId;
	}
	
	/**
	 * @param participantId the participantId to set
	 */
	public void setParticipantId(Integer participantId) {
		this.participantId = participantId;
	}
	
	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * @return the action
	 */
	public Action getAction() {
		return action;
	}
	
	/**
	 * @param action the action to set
	 */
	public void setAction(Action action) {
		this.action = action;
	}
	
	/**
	 * @return the list of free variables
	 */
	public Set<String> getFreeVariables() {
		return this.freeVariables;
	}
	
	/**
	 * @param freeVariables the list of free variables to set
	 */
	public void setFreeVariables(Set<String> freeVariables) {
		this.freeVariables = freeVariables;
	}
	
	/**
	 * @return the person
	 */
	public Person getPerson() {
		return person;
	}
	
	/**
	 * @param person the person to set
	 */
	public void setPerson(Person person) {
		this.person = person;
	}
	
	/**
	 * @return the user
	 */
	public User getUser() {
		return user;
	}
	
	/**
	 * @param user the user to set
	 */
	public void setUser(User user) {
		this.user = user;
	}
	
	@Override
	public Integer getId() {
		return getParticipantId();
	}
	
	@Override
	public void setId(Integer id) {
		setParticipantId(id);
	}
	
	/**
	 * Returns a human readable representation of the object 
	 * @return A string representation of the object
	 */
	@Override
	public String toString() {
		return "Participant [participantId=" + participantId + ", name=" + name + ", freeVariables=" + freeVariables
		        + ", person=" + person + "]";
	}
	
	/**
	 * Returns a hash value of the object
	 * @return The hash value of the object
	 */
	public int hashCode() {
		// Auto-generated by eclipse
		
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((freeVariables == null) ? 0 : freeVariables.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((participantId == null) ? 0 : participantId.hashCode());
		result = prime * result + ((person == null) ? 0 : person.hashCode());
		result = prime * result + ((user == null) ? 0 : user.hashCode());
		return result;
	}
	
	/**
	 * Indicates whether the given object is "equal to" this one.
	 * @return If the given object is equal to this one, else false.
	 */
	@Override
	public boolean equals(Object obj) {
		// Auto-generated by eclipse
		
		if (this == obj) {
			return true;
		}
		if (!super.equals(obj)) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		
		Participant other = (Participant) obj;
		
		if (freeVariables == null) {
			if (other.freeVariables != null) {
				return false;
			}
		} else if (!freeVariables.equals(other.freeVariables)) {
			return false;
		}
		
		if (name == null) {
			if (other.name != null) {
				return false;
			}
		} else if (!name.equals(other.name)) {
			return false;
		}
		
		if (participantId == null) {
			if (other.participantId != null) {
				return false;
			}
		} else if (!participantId.equals(other.participantId)) {
			return false;
		}
		
		if (person == null) {
			if (other.person != null) {
				return false;
			}
		} else if (!person.equals(other.person)) {
			return false;
		}
		
		if (user == null) {
			if (other.user != null) {
				return false;
			}
		} else if (!user.equals(other.user)) {
			return false;
		}
		return true;
	}
	
}
